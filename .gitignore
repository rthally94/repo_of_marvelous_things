Last login: Tue Nov  3 17:03:26 on ttys000
[oh-my-zsh] Insecure completion-dependent directories detected:
drwxrwxr-x  3 ryanthally  admin   96 Sep  7 20:53 /usr/local/share/zsh
drwxrwxr-x  6 ryanthally  admin  192 Nov  3 17:04 /usr/local/share/zsh/site-functions

[oh-my-zsh] For safety, we will not load completions from these directories until
[oh-my-zsh] you fix their permissions and ownership and restart zsh.
[oh-my-zsh] See the above list for directories with group or other writability.

[oh-my-zsh] To fix your permissions you can do so by disabling
[oh-my-zsh] the write permission of "group" and "others" and making sure that the
[oh-my-zsh] owner of these directories is either root or your current user.
[oh-my-zsh] The following command may help:
[oh-my-zsh]     compaudit | xargs chmod g-w,o-w

[oh-my-zsh] If the above didn't help or you want to skip the verification of
[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to
[oh-my-zsh] "true" before oh-my-zsh is sourced in your zshrc file.

➜  ~ ls
Applications                    Pictures
Desktop                         Public
Documents                       java_error_in_pycharm_40690.log
Downloads                       java_error_in_pycharm_41168.log
Library                         java_error_in_pycharm_41352.log
Movies                          nltk_data
Music
➜  ~ cd /Volumes/Macintosh\ HD/Users/ryanthally/Development
➜  Development ls
CoreDataIssue                          SwiftPaletteDemoApp
CoreDataIssue.zip                      Test
DateRange.playground                   Xcode - CoreDataIssue - Graph View.png
Grow Scraper                           Xcode - CoreDataIssue - Table View.png
JSON Decoder.playground                YardSale
Patch                                  grow
SwiftPalette
➜  Development ls
CoreDataIssue                          SwiftPaletteDemoApp
CoreDataIssue.zip                      Test
DateRange.playground                   Xcode - CoreDataIssue - Graph View.png
Grow Scraper                           Xcode - CoreDataIssue - Table View.png
JSON Decoder.playground                YardSale
Patch                                  grow
SwiftPalette
➜  Development mkdir repo_of_marvelous_things
➜  Development cd repo_of_marvelous_things
➜  repo_of_marvelous_things echo "# repo_of_marvelous_things" >> README.md
➜  repo_of_marvelous_things git init
Initialized empty Git repository in /Volumes/Macintosh HD/Users/ryanthally/Development/repo_of_marvelous_things/.git/
➜  repo_of_marvelous_things git:(master) ✗ git add README.md
➜  repo_of_marvelous_things git:(master) ✗ git commit -m "Initial commit"
[master (root-commit) 0ffbb13] Initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
➜  repo_of_marvelous_things git:(master) git branch -M main
➜  repo_of_marvelous_things git:(main) git remote add origin https://github.com/rthally94/repo_of_marvelous_things.git
➜  repo_of_marvelous_things git:(main) git push -u origin main
Username for 'https://github.com': rthally94
Password for 'https://rthally94@github.com':
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/rthally94/repo_of_marvelous_things.git/'
➜  repo_of_marvelous_things git:(main) git push -u origin main
Username for 'https://github.com': rthally94
Password for 'https://rthally94@github.com':
To https://github.com/rthally94/repo_of_marvelous_things.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/rthally94/repo_of_marvelous_things.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
➜  repo_of_marvelous_things git:(main) git fetch
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (5/5), done.
Unpacking objects: 100% (5/5), 2.27 KiB | 465.00 KiB/s, done.
remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
From https://github.com/rthally94/repo_of_marvelous_things
 * [new branch]      main       -> origin/main
➜  repo_of_marvelous_things git:(main) git push -u origin main
To https://github.com/rthally94/repo_of_marvelous_things.git
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/rthally94/repo_of_marvelous_things.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
➜  repo_of_marvelous_things git:(main) git pull
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> main

➜  repo_of_marvelous_things git:(main) git rebase
There is no tracking information for the current branch.
Please specify which branch you want to rebase against.
See git-rebase(1) for details.

    git rebase '<branch>'

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=<remote>/<branch> main

➜  repo_of_marvelous_things git:(main) git rebase main
Current branch main is up to date.
➜  repo_of_marvelous_things git:(main) git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main

➜  repo_of_marvelous_things git:(main) git fetch
➜  repo_of_marvelous_things git:(main) git status
On branch main
nothing to commit, working tree clean
➜  repo_of_marvelous_things git:(main) ls
README.md
➜  repo_of_marvelous_things git:(main) git fetch
➜  repo_of_marvelous_things git:(main) git pull
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> main

➜  repo_of_marvelous_things git:(main) git pull main
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

fatal: 'main' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
➜  repo_of_marvelous_things git:(main) git pull origin main
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

From https://github.com/rthally94/repo_of_marvelous_things
 * branch            main       -> FETCH_HEAD
fatal: refusing to merge unrelated histories
➜  repo_of_marvelous_things git:(main) git help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
➜  repo_of_marvelous_things git:(main) git pull
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> main

➜  repo_of_marvelous_things git:(main) git pull origin main
warning: Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:

  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only

You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.

From https://github.com/rthally94/repo_of_marvelous_things
 * branch            main       -> FETCH_HEAD
fatal: refusing to merge unrelated histories
➜  repo_of_marvelous_things git:(main) git pull -h
usage: git pull [<options>] [<repository> [<refspec>...]]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    --recurse-submodules[=<on-demand>]
                          control for recursive fetching of submodules

Options related to merging
    -r, --rebase[=(false|true|merges|preserve|interactive)]
                          incorporate changes by rebasing rather than merging
    -n                    do not show a diffstat at the end of the merge
    --stat                show a diffstat at the end of the merge
    --log[=<n>]           add (at most <n>) entries from shortlog to merge commit message
    --signoff[=...]       add Signed-off-by:
    --squash              create a single commit instead of doing a merge
    --commit              perform a commit if the merge succeeds (default)
    --edit                edit message before committing
    --cleanup <mode>      how to strip spaces and #comments from message
    --ff                  allow fast-forward
    --ff-only             abort if fast-forward is not possible
    --verify-signatures   verify that the named commit has a valid GPG signature
    --autostash           automatically stash/stash pop before and after
    -s, --strategy <strategy>
                          merge strategy to use
    -X, --strategy-option <option=value>
                          option for selected merge strategy
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit
    --allow-unrelated-histories
                          allow merging unrelated histories

Options related to fetching
Initial commit
    --all                 fetch from all remotes
    -a, --append          append to .git/FETCH_HEAD instead of overwriting
    --upload-pack <path>  path to upload pack on remote end
    -f, --force           force overwrite of local branch
    -t, --tags            fetch all tags and associated objects
    -p, --prune           prune remote-tracking branches no longer on remote
    -j, --jobs[=<n>]      number of submodules pulled in parallel
    --dry-run             dry run
    -k, --keep            keep downloaded pack
    --depth <depth>       deepen history of shallow clone
    --shallow-since <time>
                          deepen history of shallow repository based on time
    --shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --deepen <n>          deepen history of shallow clone
    --unshallow           convert to a complete repository
    --update-shallow      accept refs that update .git/shallow
    --refmap <refmap>     specify fetch refmap
    -o, --server-option <server-specific>
                          option to transmit
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only
    --negotiation-tip <revision>
                          report that we have only objects reachable from this object
    --show-forced-updates
                          check for forced-updates on all updated branches
    --set-upstream        set upstream for git pull/fetch

➜  repo_of_marvelous_things git:(main) git pull -r origin main
From https://github.com/rthally94/repo_of_marvelous_things
 * branch            main       -> FETCH_HEAD
CONFLICT (add/add): Merge conflict in README.md
Auto-merging README.md
error: could not apply 0ffbb13... Initial commit
Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply 0ffbb13... Initial commit
➜  repo_of_marvelous_things git:(09d6a09) ✗ git status
interactive rebase in progress; onto 09d6a09
Last command done (1 command done):
   pick 0ffbb13 Initial commit
No commands remaining.
You are currently rebasing branch 'main' on '09d6a09'.
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
	both added:      README.md

no changes added to commit (use "git add" and/or "git commit -a")
➜  repo_of_marvelous_things git:(09d6a09) ✗ git rebase --continue
README.md: needs merge
You must edit all merge conflicts and then
mark them as resolved using git add
➜  repo_of_marvelous_things git:(09d6a09) ✗ git merge
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.
➜  repo_of_marvelous_things git:(09d6a09) ✗ git rm README.md
rm 'README.md'
➜  repo_of_marvelous_things git:(09d6a09) ✗ git rebase --continue
[detached HEAD 0991a94] Initial commit
 1 file changed, 2 deletions(-)
 delete mode 100644 README.md
Successfully rebased and updated refs/heads/main.
➜  repo_of_marvelous_things git:(main) git status
On branch main
nothing to commit, working tree clean
➜  repo_of_marvelous_things git:(main) git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main

➜  repo_of_marvelous_things git:(main) git push origin main
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 24 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 231 bytes | 231.00 KiB/s, done.
Total 2 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/rthally94/repo_of_marvelous_things.git
   09d6a09..0991a94  main -> main
➜  repo_of_marvelous_things git:(main) ls
LICENSE
➜  repo_of_marvelous_things git:(main) touch README.md
➜  repo_of_marvelous_things git:(main) ✗ git add README.md
➜  repo_of_marvelous_things git:(main) ✗ git commit -m "Added README"
[main 253828a] Added README
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md
➜  repo_of_marvelous_things git:(main) git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main

➜  repo_of_marvelous_things git:(main) git push origin main
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 24 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 315 bytes | 315.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/rthally94/repo_of_marvelous_things.git
   0991a94..253828a  main -> main
➜  repo_of_marvelous_things git:(main) git checkout main
Already on 'main'
➜  repo_of_marvelous_things git:(main) mkdir Foundation
➜  repo_of_marvelous_things git:(main) mkdir Dates\ &\ Times
[1] 11099
[1]  + 11099 done       mkdir Dates\
zsh: command not found:  Times
➜  repo_of_marvelous_things git:(main) ls
Dates      Foundation LICENSE    README.md
➜  repo_of_marvelous_things git:(main) cd Dates\
➜  Dates  git:(main) ls
➜  Dates  git:(main) cd ..
➜  repo_of_marvelous_things git:(main) rmdir Dates\
➜  repo_of_marvelous_things git:(main) ls
Foundation LICENSE    README.md
➜  repo_of_marvelous_things git:(main) cd Foundation
➜  Foundation git:(main) ls
➜  Foundation git:(main) mkdir "Dates & Times"
➜  Foundation git:(main) ls
Dates & Times
➜  Foundation git:(main) cd Dates\ \&\ Times
➜  Dates & Times git:(main) ls
Dates.playground
➜  Dates & Times git:(main) ✗ git status
On branch main
Untracked files:
Merge branch 'main' of https://github.com/rthally94/repo_of_marvelous_things into main
  (use "git add <file>..." to include in what will be committed)
	../

nothing added to commit but untracked files present (use "git add" to track)
➜  Dates & Times git:(main) ✗ git add ../
➜  Dates & Times git:(main) ✗ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   Dates.playground/Contents.swift
	new file:   Dates.playground/contents.xcplayground

➜  Dates & Times git:(main) ✗ git commit -m "Added playground for Date fundamentals"
[main 840a2d0] Added playground for Date fundamentals
 2 files changed, 7 insertions(+)
 create mode 100644 Foundation/Dates & Times/Dates.playground/Contents.swift
 create mode 100644 Foundation/Dates & Times/Dates.playground/contents.xcplayground
➜  Dates & Times git:(main) git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Dates.playground/Contents.swift

no changes added to commit (use "git add" and/or "git commit -a")
➜  Dates & Times git:(main) ✗ git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Turn this message off by running
hint: "git config advice.addEmptyPathspec false"
➜  Dates & Times git:(main) ✗ git add Dates.playground
➜  Dates & Times git:(main) ✗ ls
Dates.playground
  GNU nano 2.0.6                        File: .gitignore

# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-contr$
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
                                              [ Read 90 lines ]
^G Get Help       ^O WriteOut       ^R Read File      ^Y Prev Page      ^K Cut Text       ^C Cur Pos
^X Exit           ^J Justify        ^W Where Is       ^V Next Page      ^U UnCut Text     ^T To Spell
